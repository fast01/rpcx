// Code generated by protoc-gen-go. DO NOT EDIT.
// source: baidu/rpc/span.proto

package baidu_rpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type SpanType int32

const (
	SpanType_SPAN_TYPE_SERVER SpanType = 0
	SpanType_SPAN_TYPE_CLIENT SpanType = 1
)

var SpanType_name = map[int32]string{
	0: "SPAN_TYPE_SERVER",
	1: "SPAN_TYPE_CLIENT",
}
var SpanType_value = map[string]int32{
	"SPAN_TYPE_SERVER": 0,
	"SPAN_TYPE_CLIENT": 1,
}

func (x SpanType) Enum() *SpanType {
	p := new(SpanType)
	*p = x
	return p
}
func (x SpanType) String() string {
	return proto.EnumName(SpanType_name, int32(x))
}
func (x *SpanType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(SpanType_value, data, "SpanType")
	if err != nil {
		return err
	}
	*x = SpanType(value)
	return nil
}
func (SpanType) EnumDescriptor() ([]byte, []int) { return fileDescriptor6, []int{0} }

// We don't unify RpczSpan and TracingSpan as one because the former one needs
// to be as lightweight as possible, say `info' equals span_name + annotations
// in TracingSpan which needs heavier memory allocations.
type RpczSpan struct {
	TraceId      *uint64 `protobuf:"varint,1,req,name=trace_id,json=traceId" json:"trace_id,omitempty"`
	SpanId       *uint64 `protobuf:"varint,2,req,name=span_id,json=spanId" json:"span_id,omitempty"`
	ParentSpanId *uint64 `protobuf:"varint,3,req,name=parent_span_id,json=parentSpanId" json:"parent_span_id,omitempty"`
	LogId        *uint64 `protobuf:"varint,4,opt,name=log_id,json=logId" json:"log_id,omitempty"`
	BaseCid      *uint64 `protobuf:"varint,5,opt,name=base_cid,json=baseCid" json:"base_cid,omitempty"`
	EndingCid    *uint64 `protobuf:"varint,6,opt,name=ending_cid,json=endingCid" json:"ending_cid,omitempty"`
	// We don't use additional message for EndPoint to save a memory allocation.
	RemoteIp            *uint32       `protobuf:"varint,7,opt,name=remote_ip,json=remoteIp" json:"remote_ip,omitempty"`
	RemotePort          *uint32       `protobuf:"varint,8,opt,name=remote_port,json=remotePort" json:"remote_port,omitempty"`
	Type                *SpanType     `protobuf:"varint,9,opt,name=type,enum=baidu.rpc.SpanType" json:"type,omitempty"`
	Async               *bool         `protobuf:"varint,10,opt,name=async" json:"async,omitempty"`
	Protocol            *ProtocolType `protobuf:"varint,11,opt,name=protocol,enum=baidu.rpc.ProtocolType" json:"protocol,omitempty"`
	ErrorCode           *int32        `protobuf:"varint,12,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
	RequestSize         *int32        `protobuf:"varint,13,opt,name=request_size,json=requestSize" json:"request_size,omitempty"`
	ResponseSize        *int32        `protobuf:"varint,14,opt,name=response_size,json=responseSize" json:"response_size,omitempty"`
	ReceivedRealUs      *int64        `protobuf:"varint,15,opt,name=received_real_us,json=receivedRealUs" json:"received_real_us,omitempty"`
	StartParseRealUs    *int64        `protobuf:"varint,16,opt,name=start_parse_real_us,json=startParseRealUs" json:"start_parse_real_us,omitempty"`
	StartCallbackRealUs *int64        `protobuf:"varint,17,opt,name=start_callback_real_us,json=startCallbackRealUs" json:"start_callback_real_us,omitempty"`
	StartSendRealUs     *int64        `protobuf:"varint,18,opt,name=start_send_real_us,json=startSendRealUs" json:"start_send_real_us,omitempty"`
	SentRealUs          *int64        `protobuf:"varint,19,opt,name=sent_real_us,json=sentRealUs" json:"sent_real_us,omitempty"`
	Info                *string       `protobuf:"bytes,20,opt,name=info" json:"info,omitempty"`
	ClientSpans         []*RpczSpan   `protobuf:"bytes,21,rep,name=client_spans,json=clientSpans" json:"client_spans,omitempty"`
	XXX_unrecognized    []byte        `json:"-"`
}

func (m *RpczSpan) Reset()                    { *m = RpczSpan{} }
func (m *RpczSpan) String() string            { return proto.CompactTextString(m) }
func (*RpczSpan) ProtoMessage()               {}
func (*RpczSpan) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{0} }

func (m *RpczSpan) GetTraceId() uint64 {
	if m != nil && m.TraceId != nil {
		return *m.TraceId
	}
	return 0
}

func (m *RpczSpan) GetSpanId() uint64 {
	if m != nil && m.SpanId != nil {
		return *m.SpanId
	}
	return 0
}

func (m *RpczSpan) GetParentSpanId() uint64 {
	if m != nil && m.ParentSpanId != nil {
		return *m.ParentSpanId
	}
	return 0
}

func (m *RpczSpan) GetLogId() uint64 {
	if m != nil && m.LogId != nil {
		return *m.LogId
	}
	return 0
}

func (m *RpczSpan) GetBaseCid() uint64 {
	if m != nil && m.BaseCid != nil {
		return *m.BaseCid
	}
	return 0
}

func (m *RpczSpan) GetEndingCid() uint64 {
	if m != nil && m.EndingCid != nil {
		return *m.EndingCid
	}
	return 0
}

func (m *RpczSpan) GetRemoteIp() uint32 {
	if m != nil && m.RemoteIp != nil {
		return *m.RemoteIp
	}
	return 0
}

func (m *RpczSpan) GetRemotePort() uint32 {
	if m != nil && m.RemotePort != nil {
		return *m.RemotePort
	}
	return 0
}

func (m *RpczSpan) GetType() SpanType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return SpanType_SPAN_TYPE_SERVER
}

func (m *RpczSpan) GetAsync() bool {
	if m != nil && m.Async != nil {
		return *m.Async
	}
	return false
}

func (m *RpczSpan) GetProtocol() ProtocolType {
	if m != nil && m.Protocol != nil {
		return *m.Protocol
	}
	return ProtocolType_PROTOCOL_UNKNOWN
}

func (m *RpczSpan) GetErrorCode() int32 {
	if m != nil && m.ErrorCode != nil {
		return *m.ErrorCode
	}
	return 0
}

func (m *RpczSpan) GetRequestSize() int32 {
	if m != nil && m.RequestSize != nil {
		return *m.RequestSize
	}
	return 0
}

func (m *RpczSpan) GetResponseSize() int32 {
	if m != nil && m.ResponseSize != nil {
		return *m.ResponseSize
	}
	return 0
}

func (m *RpczSpan) GetReceivedRealUs() int64 {
	if m != nil && m.ReceivedRealUs != nil {
		return *m.ReceivedRealUs
	}
	return 0
}

func (m *RpczSpan) GetStartParseRealUs() int64 {
	if m != nil && m.StartParseRealUs != nil {
		return *m.StartParseRealUs
	}
	return 0
}

func (m *RpczSpan) GetStartCallbackRealUs() int64 {
	if m != nil && m.StartCallbackRealUs != nil {
		return *m.StartCallbackRealUs
	}
	return 0
}

func (m *RpczSpan) GetStartSendRealUs() int64 {
	if m != nil && m.StartSendRealUs != nil {
		return *m.StartSendRealUs
	}
	return 0
}

func (m *RpczSpan) GetSentRealUs() int64 {
	if m != nil && m.SentRealUs != nil {
		return *m.SentRealUs
	}
	return 0
}

func (m *RpczSpan) GetInfo() string {
	if m != nil && m.Info != nil {
		return *m.Info
	}
	return ""
}

func (m *RpczSpan) GetClientSpans() []*RpczSpan {
	if m != nil {
		return m.ClientSpans
	}
	return nil
}

type BriefSpan struct {
	TraceId          *uint64 `protobuf:"varint,1,req,name=trace_id,json=traceId" json:"trace_id,omitempty"`
	SpanId           *uint64 `protobuf:"varint,2,req,name=span_id,json=spanId" json:"span_id,omitempty"`
	LogId            *uint64 `protobuf:"varint,3,opt,name=log_id,json=logId" json:"log_id,omitempty"`
	ErrorCode        *int32  `protobuf:"varint,4,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
	RequestSize      *int32  `protobuf:"varint,5,opt,name=request_size,json=requestSize" json:"request_size,omitempty"`
	ResponseSize     *int32  `protobuf:"varint,6,opt,name=response_size,json=responseSize" json:"response_size,omitempty"`
	StartRealUs      *int64  `protobuf:"varint,7,opt,name=start_real_us,json=startRealUs" json:"start_real_us,omitempty"`
	LatencyUs        *int64  `protobuf:"varint,8,opt,name=latency_us,json=latencyUs" json:"latency_us,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *BriefSpan) Reset()                    { *m = BriefSpan{} }
func (m *BriefSpan) String() string            { return proto.CompactTextString(m) }
func (*BriefSpan) ProtoMessage()               {}
func (*BriefSpan) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{1} }

func (m *BriefSpan) GetTraceId() uint64 {
	if m != nil && m.TraceId != nil {
		return *m.TraceId
	}
	return 0
}

func (m *BriefSpan) GetSpanId() uint64 {
	if m != nil && m.SpanId != nil {
		return *m.SpanId
	}
	return 0
}

func (m *BriefSpan) GetLogId() uint64 {
	if m != nil && m.LogId != nil {
		return *m.LogId
	}
	return 0
}

func (m *BriefSpan) GetErrorCode() int32 {
	if m != nil && m.ErrorCode != nil {
		return *m.ErrorCode
	}
	return 0
}

func (m *BriefSpan) GetRequestSize() int32 {
	if m != nil && m.RequestSize != nil {
		return *m.RequestSize
	}
	return 0
}

func (m *BriefSpan) GetResponseSize() int32 {
	if m != nil && m.ResponseSize != nil {
		return *m.ResponseSize
	}
	return 0
}

func (m *BriefSpan) GetStartRealUs() int64 {
	if m != nil && m.StartRealUs != nil {
		return *m.StartRealUs
	}
	return 0
}

func (m *BriefSpan) GetLatencyUs() int64 {
	if m != nil && m.LatencyUs != nil {
		return *m.LatencyUs
	}
	return 0
}

type SpanAnnotation struct {
	RealtimeUs       *int64  `protobuf:"varint,1,req,name=realtime_us,json=realtimeUs" json:"realtime_us,omitempty"`
	Content          *string `protobuf:"bytes,2,req,name=content" json:"content,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *SpanAnnotation) Reset()                    { *m = SpanAnnotation{} }
func (m *SpanAnnotation) String() string            { return proto.CompactTextString(m) }
func (*SpanAnnotation) ProtoMessage()               {}
func (*SpanAnnotation) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{2} }

func (m *SpanAnnotation) GetRealtimeUs() int64 {
	if m != nil && m.RealtimeUs != nil {
		return *m.RealtimeUs
	}
	return 0
}

func (m *SpanAnnotation) GetContent() string {
	if m != nil && m.Content != nil {
		return *m.Content
	}
	return ""
}

type TracingSpan struct {
	TraceId             *uint64           `protobuf:"varint,1,req,name=trace_id,json=traceId" json:"trace_id,omitempty"`
	SpanId              *uint64           `protobuf:"varint,2,req,name=span_id,json=spanId" json:"span_id,omitempty"`
	ParentSpanId        *uint64           `protobuf:"varint,3,req,name=parent_span_id,json=parentSpanId" json:"parent_span_id,omitempty"`
	LogId               *uint64           `protobuf:"varint,4,opt,name=log_id,json=logId" json:"log_id,omitempty"`
	RemoteIp            *uint32           `protobuf:"varint,5,opt,name=remote_ip,json=remoteIp" json:"remote_ip,omitempty"`
	RemotePort          *uint32           `protobuf:"varint,6,opt,name=remote_port,json=remotePort" json:"remote_port,omitempty"`
	Type                *SpanType         `protobuf:"varint,7,opt,name=type,enum=baidu.rpc.SpanType" json:"type,omitempty"`
	Protocol            *ProtocolType     `protobuf:"varint,8,opt,name=protocol,enum=baidu.rpc.ProtocolType" json:"protocol,omitempty"`
	ErrorCode           *int32            `protobuf:"varint,9,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
	RequestSize         *int32            `protobuf:"varint,10,opt,name=request_size,json=requestSize" json:"request_size,omitempty"`
	ResponseSize        *int32            `protobuf:"varint,11,opt,name=response_size,json=responseSize" json:"response_size,omitempty"`
	ReceivedRealUs      *int64            `protobuf:"varint,12,opt,name=received_real_us,json=receivedRealUs" json:"received_real_us,omitempty"`
	StartParseRealUs    *int64            `protobuf:"varint,13,opt,name=start_parse_real_us,json=startParseRealUs" json:"start_parse_real_us,omitempty"`
	StartCallbackRealUs *int64            `protobuf:"varint,14,opt,name=start_callback_real_us,json=startCallbackRealUs" json:"start_callback_real_us,omitempty"`
	StartSendRealUs     *int64            `protobuf:"varint,15,opt,name=start_send_real_us,json=startSendRealUs" json:"start_send_real_us,omitempty"`
	SentRealUs          *int64            `protobuf:"varint,16,opt,name=sent_real_us,json=sentRealUs" json:"sent_real_us,omitempty"`
	SpanName            *string           `protobuf:"bytes,17,opt,name=span_name,json=spanName" json:"span_name,omitempty"`
	Annotations         []*SpanAnnotation `protobuf:"bytes,18,rep,name=annotations" json:"annotations,omitempty"`
	ClientSpans         []*TracingSpan    `protobuf:"bytes,19,rep,name=client_spans,json=clientSpans" json:"client_spans,omitempty"`
	XXX_unrecognized    []byte            `json:"-"`
}

func (m *TracingSpan) Reset()                    { *m = TracingSpan{} }
func (m *TracingSpan) String() string            { return proto.CompactTextString(m) }
func (*TracingSpan) ProtoMessage()               {}
func (*TracingSpan) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{3} }

func (m *TracingSpan) GetTraceId() uint64 {
	if m != nil && m.TraceId != nil {
		return *m.TraceId
	}
	return 0
}

func (m *TracingSpan) GetSpanId() uint64 {
	if m != nil && m.SpanId != nil {
		return *m.SpanId
	}
	return 0
}

func (m *TracingSpan) GetParentSpanId() uint64 {
	if m != nil && m.ParentSpanId != nil {
		return *m.ParentSpanId
	}
	return 0
}

func (m *TracingSpan) GetLogId() uint64 {
	if m != nil && m.LogId != nil {
		return *m.LogId
	}
	return 0
}

func (m *TracingSpan) GetRemoteIp() uint32 {
	if m != nil && m.RemoteIp != nil {
		return *m.RemoteIp
	}
	return 0
}

func (m *TracingSpan) GetRemotePort() uint32 {
	if m != nil && m.RemotePort != nil {
		return *m.RemotePort
	}
	return 0
}

func (m *TracingSpan) GetType() SpanType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return SpanType_SPAN_TYPE_SERVER
}

func (m *TracingSpan) GetProtocol() ProtocolType {
	if m != nil && m.Protocol != nil {
		return *m.Protocol
	}
	return ProtocolType_PROTOCOL_UNKNOWN
}

func (m *TracingSpan) GetErrorCode() int32 {
	if m != nil && m.ErrorCode != nil {
		return *m.ErrorCode
	}
	return 0
}

func (m *TracingSpan) GetRequestSize() int32 {
	if m != nil && m.RequestSize != nil {
		return *m.RequestSize
	}
	return 0
}

func (m *TracingSpan) GetResponseSize() int32 {
	if m != nil && m.ResponseSize != nil {
		return *m.ResponseSize
	}
	return 0
}

func (m *TracingSpan) GetReceivedRealUs() int64 {
	if m != nil && m.ReceivedRealUs != nil {
		return *m.ReceivedRealUs
	}
	return 0
}

func (m *TracingSpan) GetStartParseRealUs() int64 {
	if m != nil && m.StartParseRealUs != nil {
		return *m.StartParseRealUs
	}
	return 0
}

func (m *TracingSpan) GetStartCallbackRealUs() int64 {
	if m != nil && m.StartCallbackRealUs != nil {
		return *m.StartCallbackRealUs
	}
	return 0
}

func (m *TracingSpan) GetStartSendRealUs() int64 {
	if m != nil && m.StartSendRealUs != nil {
		return *m.StartSendRealUs
	}
	return 0
}

func (m *TracingSpan) GetSentRealUs() int64 {
	if m != nil && m.SentRealUs != nil {
		return *m.SentRealUs
	}
	return 0
}

func (m *TracingSpan) GetSpanName() string {
	if m != nil && m.SpanName != nil {
		return *m.SpanName
	}
	return ""
}

func (m *TracingSpan) GetAnnotations() []*SpanAnnotation {
	if m != nil {
		return m.Annotations
	}
	return nil
}

func (m *TracingSpan) GetClientSpans() []*TracingSpan {
	if m != nil {
		return m.ClientSpans
	}
	return nil
}

func init() {
	proto.RegisterType((*RpczSpan)(nil), "baidu.rpc.RpczSpan")
	proto.RegisterType((*BriefSpan)(nil), "baidu.rpc.BriefSpan")
	proto.RegisterType((*SpanAnnotation)(nil), "baidu.rpc.SpanAnnotation")
	proto.RegisterType((*TracingSpan)(nil), "baidu.rpc.TracingSpan")
	proto.RegisterEnum("baidu.rpc.SpanType", SpanType_name, SpanType_value)
}

func init() { proto.RegisterFile("baidu/rpc/span.proto", fileDescriptor6) }

var fileDescriptor6 = []byte{
	// 763 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xc4, 0x54, 0x4d, 0x6f, 0xeb, 0x44,
	0x14, 0xc5, 0x4d, 0x9c, 0xd8, 0xd7, 0x49, 0x1a, 0x26, 0xe9, 0xab, 0x1f, 0x4f, 0x4f, 0x98, 0x80,
	0x84, 0x05, 0x22, 0x4f, 0xa2, 0x52, 0x25, 0xc4, 0xaa, 0x8d, 0xb2, 0x88, 0x40, 0x55, 0x34, 0x49,
	0x91, 0x58, 0x59, 0xd3, 0xf1, 0x34, 0xb2, 0x70, 0x66, 0xcc, 0xcc, 0x14, 0x29, 0x5d, 0xf1, 0x9f,
	0x59, 0xb0, 0x45, 0x33, 0xb6, 0xf3, 0x51, 0x3e, 0x9a, 0x76, 0xc3, 0xce, 0x73, 0xce, 0xb9, 0x63,
	0xfb, 0xde, 0x73, 0x0f, 0x0c, 0xef, 0x48, 0x96, 0x3e, 0x7c, 0x90, 0x05, 0xfd, 0xa0, 0x0a, 0xc2,
	0xc7, 0x85, 0x14, 0x5a, 0x20, 0xdf, 0xa2, 0x63, 0x59, 0xd0, 0x4f, 0xce, 0x77, 0x02, 0x51, 0xe8,
	0x4c, 0x70, 0x55, 0x6a, 0x46, 0x7f, 0xba, 0xe0, 0xe1, 0x82, 0x3e, 0x2e, 0x0a, 0xc2, 0xd1, 0x5b,
	0xf0, 0xb4, 0x24, 0x94, 0x25, 0x59, 0x1a, 0x3a, 0xd1, 0x49, 0xdc, 0xc4, 0x6d, 0x7b, 0x9e, 0xa5,
	0xe8, 0x1c, 0xda, 0xe6, 0x66, 0xc3, 0x9c, 0x58, 0xa6, 0x65, 0x8e, 0xb3, 0x14, 0x7d, 0x01, 0xbd,
	0x82, 0x48, 0xc6, 0x75, 0x52, 0xf3, 0x0d, 0xcb, 0x77, 0x4a, 0x74, 0x51, 0xaa, 0xce, 0xa0, 0x95,
	0x8b, 0x95, 0x61, 0x9b, 0x91, 0x13, 0x37, 0xb1, 0x9b, 0x8b, 0xd5, 0x2c, 0x35, 0x2f, 0xbc, 0x23,
	0x8a, 0x25, 0x34, 0x4b, 0x43, 0xd7, 0x12, 0x6d, 0x73, 0x9e, 0x64, 0x29, 0x7a, 0x0f, 0xc0, 0x78,
	0x9a, 0xf1, 0x95, 0x25, 0x5b, 0x96, 0xf4, 0x4b, 0xc4, 0xd0, 0xef, 0xc0, 0x97, 0x6c, 0x2d, 0x34,
	0x4b, 0xb2, 0x22, 0x6c, 0x47, 0x4e, 0xdc, 0xc5, 0x5e, 0x09, 0xcc, 0x0a, 0xf4, 0x29, 0x04, 0x15,
	0x59, 0x08, 0xa9, 0x43, 0xcf, 0xd2, 0x50, 0x42, 0x73, 0x21, 0x35, 0xfa, 0x12, 0x9a, 0x7a, 0x53,
	0xb0, 0xd0, 0x8f, 0x9c, 0xb8, 0xf7, 0xed, 0x60, 0xbc, 0x6d, 0xd4, 0xd8, 0x7c, 0xef, 0x72, 0x53,
	0x30, 0x6c, 0x05, 0x68, 0x08, 0x2e, 0x51, 0x1b, 0x4e, 0x43, 0x88, 0x9c, 0xd8, 0xc3, 0xe5, 0x01,
	0x5d, 0x80, 0x67, 0xbb, 0x47, 0x45, 0x1e, 0x06, 0xf6, 0x8a, 0xf3, 0xbd, 0x2b, 0xe6, 0x15, 0x65,
	0xaf, 0xd9, 0x0a, 0xed, 0x0f, 0x49, 0x29, 0x64, 0x42, 0x45, 0xca, 0xc2, 0x4e, 0xe4, 0xc4, 0x2e,
	0xf6, 0x2d, 0x32, 0x11, 0x29, 0x43, 0x9f, 0x41, 0x47, 0xb2, 0x5f, 0x1f, 0x98, 0xd2, 0x89, 0xca,
	0x1e, 0x59, 0xd8, 0xb5, 0x82, 0xa0, 0xc2, 0x16, 0xd9, 0x23, 0x43, 0x9f, 0x43, 0x57, 0x32, 0x55,
	0x08, 0xae, 0x58, 0xa9, 0xe9, 0x59, 0x4d, 0xa7, 0x06, 0xad, 0x28, 0x86, 0xbe, 0x64, 0x94, 0x65,
	0xbf, 0xb1, 0x34, 0x91, 0x8c, 0xe4, 0xc9, 0x83, 0x0a, 0x4f, 0x23, 0x27, 0x6e, 0xe0, 0x5e, 0x8d,
	0x63, 0x46, 0xf2, 0x5b, 0x85, 0xbe, 0x81, 0x81, 0xd2, 0x44, 0xea, 0xa4, 0x20, 0x52, 0xb1, 0xad,
	0xb8, 0x6f, 0xc5, 0x7d, 0x4b, 0xcd, 0x0d, 0x53, 0xc9, 0x2f, 0xe0, 0x4d, 0x29, 0xa7, 0x24, 0xcf,
	0xef, 0x08, 0xfd, 0x65, 0x5b, 0xf1, 0xb1, 0xad, 0x28, 0x2f, 0x9b, 0x54, 0x64, 0x55, 0xf4, 0x35,
	0xa0, 0xb2, 0x48, 0x31, 0xbe, 0xfb, 0x1e, 0x64, 0x0b, 0x4e, 0x2d, 0xb3, 0x60, 0xbc, 0xfe, 0xa0,
	0x08, 0x3a, 0xca, 0x18, 0xa9, 0x96, 0x0d, 0xac, 0x0c, 0x0c, 0x56, 0x29, 0x10, 0x34, 0x33, 0x7e,
	0x2f, 0xc2, 0x61, 0xe4, 0xc4, 0x3e, 0xb6, 0xcf, 0xe8, 0x12, 0x3a, 0x34, 0xcf, 0x6a, 0x03, 0xaa,
	0xf0, 0x2c, 0x6a, 0xc4, 0xc1, 0xc1, 0x4c, 0x6b, 0x7f, 0xe3, 0xa0, 0x14, 0x9a, 0x67, 0x35, 0xfa,
	0xfd, 0x04, 0xfc, 0x6b, 0x99, 0xb1, 0xfb, 0x57, 0x5b, 0x7f, 0x67, 0xea, 0xc6, 0xbe, 0xa9, 0x0f,
	0x07, 0xdd, 0x7c, 0x6e, 0xd0, 0xee, 0x11, 0x83, 0x6e, 0xfd, 0xc3, 0xa0, 0x47, 0xd0, 0x2d, 0x5b,
	0x5b, 0xb7, 0xab, 0x6d, 0xdb, 0x15, 0x58, 0xb0, 0xea, 0xd7, 0x7b, 0x80, 0x9c, 0x68, 0xc6, 0xe9,
	0xc6, 0x08, 0x3c, 0x2b, 0xf0, 0x2b, 0xe4, 0x56, 0x8d, 0x7e, 0x80, 0x9e, 0xf9, 0xf9, 0x2b, 0xce,
	0x85, 0x26, 0x26, 0x15, 0xca, 0xcd, 0x21, 0xb9, 0xce, 0xd6, 0xcc, 0x54, 0x98, 0x4e, 0x34, 0xcc,
	0xe6, 0x94, 0xd0, 0xad, 0x42, 0x21, 0xb4, 0xa9, 0xe0, 0x9a, 0x71, 0x6d, 0x9b, 0xe1, 0xe3, 0xfa,
	0x38, 0xfa, 0xc3, 0x85, 0x60, 0x29, 0x09, 0xcd, 0xf8, 0xea, 0xff, 0x09, 0x93, 0x83, 0x48, 0x70,
	0xff, 0x3b, 0x12, 0x5a, 0xff, 0x1a, 0x09, 0xed, 0xe7, 0x22, 0x61, 0x7f, 0xf9, 0xbd, 0xd7, 0x2d,
	0xbf, 0xff, 0x9c, 0x27, 0xe0, 0x08, 0x4f, 0x04, 0x47, 0x2e, 0x7f, 0xe7, 0x25, 0xcb, 0xdf, 0x7d,
	0xf1, 0xf2, 0xf7, 0x5e, 0xba, 0xfc, 0xa7, 0xc7, 0x2d, 0x7f, 0xff, 0x6f, 0xcb, 0xff, 0x0e, 0x7c,
	0xeb, 0x0a, 0x4e, 0xd6, 0xcc, 0x66, 0x8e, 0x8f, 0x3d, 0x03, 0xdc, 0x90, 0x35, 0x43, 0xdf, 0x43,
	0x40, 0xb6, 0x36, 0x36, 0x09, 0x63, 0x42, 0xe0, 0xed, 0x93, 0x29, 0xee, 0x8c, 0x8e, 0xf7, 0xd5,
	0xe8, 0xbb, 0x27, 0x11, 0x32, 0xb0, 0xd5, 0x6f, 0xf6, 0xaa, 0xf7, 0x8c, 0x7d, 0x90, 0x22, 0x5f,
	0x5d, 0x82, 0x57, 0xfb, 0x03, 0x0d, 0xa1, 0xbf, 0x98, 0x5f, 0xdd, 0x24, 0xcb, 0x9f, 0xe7, 0xd3,
	0x64, 0x31, 0xc5, 0x3f, 0x4d, 0x71, 0xff, 0xa3, 0x43, 0x74, 0xf2, 0xe3, 0x6c, 0x7a, 0xb3, 0xec,
	0x3b, 0xd7, 0x67, 0xd0, 0xa5, 0x62, 0xbd, 0x7b, 0xc3, 0x75, 0xd3, 0x5c, 0xf3, 0x57, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x0c, 0x2d, 0xee, 0x3d, 0xc9, 0x07, 0x00, 0x00,
}
