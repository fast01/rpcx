// Code generated by protoc-gen-go. DO NOT EDIT.
// source: baidu/rpc/trackme.proto

package baidu_rpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type TrackMeSeverity int32

const (
	TrackMeSeverity_TrackMeOK      TrackMeSeverity = 0
	TrackMeSeverity_TrackMeWarning TrackMeSeverity = 1
	TrackMeSeverity_TrackMeFatal   TrackMeSeverity = 2
)

var TrackMeSeverity_name = map[int32]string{
	0: "TrackMeOK",
	1: "TrackMeWarning",
	2: "TrackMeFatal",
}
var TrackMeSeverity_value = map[string]int32{
	"TrackMeOK":      0,
	"TrackMeWarning": 1,
	"TrackMeFatal":   2,
}

func (x TrackMeSeverity) Enum() *TrackMeSeverity {
	p := new(TrackMeSeverity)
	*p = x
	return p
}
func (x TrackMeSeverity) String() string {
	return proto.EnumName(TrackMeSeverity_name, int32(x))
}
func (x *TrackMeSeverity) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(TrackMeSeverity_value, data, "TrackMeSeverity")
	if err != nil {
		return err
	}
	*x = TrackMeSeverity(value)
	return nil
}
func (TrackMeSeverity) EnumDescriptor() ([]byte, []int) { return fileDescriptor7, []int{0} }

// The request sent to brpc.baidu.com.
type TrackMeRequest struct {
	// the svn revision when baidu-rp being compiled, which will be checked
	// by server to tell if the version contains bugs
	RpcVersion       *int64  `protobuf:"varint,1,opt,name=rpc_version,json=rpcVersion" json:"rpc_version,omitempty"`
	ServerAddr       *string `protobuf:"bytes,2,opt,name=server_addr,json=serverAddr" json:"server_addr,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *TrackMeRequest) Reset()                    { *m = TrackMeRequest{} }
func (m *TrackMeRequest) String() string            { return proto.CompactTextString(m) }
func (*TrackMeRequest) ProtoMessage()               {}
func (*TrackMeRequest) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{0} }

func (m *TrackMeRequest) GetRpcVersion() int64 {
	if m != nil && m.RpcVersion != nil {
		return *m.RpcVersion
	}
	return 0
}

func (m *TrackMeRequest) GetServerAddr() string {
	if m != nil && m.ServerAddr != nil {
		return *m.ServerAddr
	}
	return ""
}

// The response from brpc.baidu.com
type TrackMeResponse struct {
	// Print an ERROR log with error_text when severity=TrackMeFatal
	// Print a WARNING log with error_text when severity=TrackMeWarning
	// Do nothing when severity=TrackMeOk
	Severity  *TrackMeSeverity `protobuf:"varint,1,opt,name=severity,enum=baidu.rpc.TrackMeSeverity" json:"severity,omitempty"`
	ErrorText *string          `protobuf:"bytes,2,opt,name=error_text,json=errorText" json:"error_text,omitempty"`
	// If this field is set, send trackme requests with this interval.
	NewInterval      *int32 `protobuf:"varint,3,opt,name=new_interval,json=newInterval" json:"new_interval,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *TrackMeResponse) Reset()                    { *m = TrackMeResponse{} }
func (m *TrackMeResponse) String() string            { return proto.CompactTextString(m) }
func (*TrackMeResponse) ProtoMessage()               {}
func (*TrackMeResponse) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{1} }

func (m *TrackMeResponse) GetSeverity() TrackMeSeverity {
	if m != nil && m.Severity != nil {
		return *m.Severity
	}
	return TrackMeSeverity_TrackMeOK
}

func (m *TrackMeResponse) GetErrorText() string {
	if m != nil && m.ErrorText != nil {
		return *m.ErrorText
	}
	return ""
}

func (m *TrackMeResponse) GetNewInterval() int32 {
	if m != nil && m.NewInterval != nil {
		return *m.NewInterval
	}
	return 0
}

func init() {
	proto.RegisterType((*TrackMeRequest)(nil), "baidu.rpc.TrackMeRequest")
	proto.RegisterType((*TrackMeResponse)(nil), "baidu.rpc.TrackMeResponse")
	proto.RegisterEnum("baidu.rpc.TrackMeSeverity", TrackMeSeverity_name, TrackMeSeverity_value)
}

func init() { proto.RegisterFile("baidu/rpc/trackme.proto", fileDescriptor7) }

var fileDescriptor7 = []byte{
	// 291 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x6c, 0x90, 0x41, 0x4b, 0x03, 0x31,
	0x10, 0x85, 0x4d, 0x8b, 0xe8, 0x4e, 0x6b, 0x5d, 0x72, 0xb1, 0x2e, 0x88, 0xb5, 0xa7, 0xe2, 0x61,
	0x0b, 0x3d, 0x78, 0x56, 0x0f, 0x05, 0x11, 0x11, 0xd2, 0xa2, 0xc7, 0x25, 0x66, 0x07, 0x09, 0xd6,
	0x24, 0x4e, 0xd2, 0x6d, 0xbd, 0x79, 0xf7, 0x4f, 0x4b, 0xbb, 0x71, 0x15, 0xf4, 0xfa, 0xcd, 0x97,
	0x97, 0x99, 0x07, 0x47, 0x4f, 0x52, 0x97, 0xcb, 0x31, 0x39, 0x35, 0x0e, 0x24, 0xd5, 0xcb, 0x2b,
	0xe6, 0x8e, 0x6c, 0xb0, 0x3c, 0xd9, 0x0e, 0x72, 0x72, 0x2a, 0xfb, 0xe5, 0x58, 0x17, 0xb4, 0x35,
	0xbe, 0x76, 0x86, 0x02, 0x7a, 0xf3, 0xcd, 0xa3, 0x3b, 0x14, 0xf8, 0xb6, 0x44, 0x1f, 0xf8, 0x29,
	0x74, 0xc8, 0xa9, 0xa2, 0x42, 0xf2, 0xda, 0x9a, 0x3e, 0x1b, 0xb0, 0x51, 0x5b, 0x00, 0x39, 0xf5,
	0x50, 0x93, 0x8d, 0xe0, 0x91, 0x2a, 0xa4, 0x42, 0x96, 0x25, 0xf5, 0x5b, 0x03, 0x36, 0x4a, 0x04,
	0xd4, 0xe8, 0xaa, 0x2c, 0x69, 0xf8, 0xc9, 0xe0, 0xb0, 0x09, 0xf5, 0xce, 0x1a, 0x8f, 0xfc, 0x02,
	0xf6, 0x3d, 0x56, 0x48, 0x3a, 0xbc, 0x6f, 0x23, 0x7b, 0x93, 0x2c, 0x6f, 0xd6, 0xcb, 0xa3, 0x3d,
	0x8b, 0x86, 0x68, 0x5c, 0x7e, 0x02, 0x80, 0x44, 0x96, 0x8a, 0x80, 0xeb, 0x10, 0xff, 0x4a, 0xb6,
	0x64, 0x8e, 0xeb, 0xc0, 0xcf, 0xa0, 0x6b, 0x70, 0x55, 0x68, 0x13, 0x90, 0x2a, 0xb9, 0xe8, 0xb7,
	0x07, 0x6c, 0xb4, 0x2b, 0x3a, 0x06, 0x57, 0x37, 0x11, 0x9d, 0x4f, 0x9b, 0x65, 0xbe, 0xe3, 0xf9,
	0x01, 0x24, 0x11, 0xdd, 0xdf, 0xa6, 0x3b, 0x9c, 0x37, 0x1d, 0x3c, 0x4a, 0x32, 0xda, 0x3c, 0xa7,
	0x8c, 0xa7, 0xd0, 0x8d, 0x6c, 0x2a, 0x83, 0x5c, 0xa4, 0xad, 0xc9, 0x4f, 0x53, 0x33, 0xa4, 0x4a,
	0x2b, 0xe4, 0x97, 0xb0, 0x17, 0x09, 0x3f, 0xfe, 0x7b, 0x4c, 0xec, 0x33, 0xcb, 0xfe, 0x1b, 0xd5,
	0xad, 0x5c, 0xb7, 0x3f, 0x18, 0xfb, 0x0a, 0x00, 0x00, 0xff, 0xff, 0xdf, 0xe7, 0xc8, 0x33, 0xc0,
	0x01, 0x00, 0x00,
}
