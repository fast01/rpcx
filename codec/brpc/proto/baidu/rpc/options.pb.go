// Code generated by protoc-gen-go. DO NOT EDIT.
// source: baidu/rpc/options.proto

package baidu_rpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/fast01/rpcx/codec/brpc/proto/google/protobuf"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type TalkType int32

const (
	TalkType_TALK_TYPE_NORMAL TalkType = 0
	TalkType_TALK_TYPE_ONEWAY TalkType = 1
)

var TalkType_name = map[int32]string{
	0: "TALK_TYPE_NORMAL",
	1: "TALK_TYPE_ONEWAY",
}
var TalkType_value = map[string]int32{
	"TALK_TYPE_NORMAL": 0,
	"TALK_TYPE_ONEWAY": 1,
}

func (x TalkType) Enum() *TalkType {
	p := new(TalkType)
	*p = x
	return p
}
func (x TalkType) String() string {
	return proto.EnumName(TalkType_name, int32(x))
}
func (x *TalkType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(TalkType_value, data, "TalkType")
	if err != nil {
		return err
	}
	*x = TalkType(value)
	return nil
}
func (TalkType) EnumDescriptor() ([]byte, []int) { return fileDescriptor4, []int{0} }

type CompressType int32

const (
	CompressType_COMPRESS_TYPE_NONE   CompressType = 0
	CompressType_COMPRESS_TYPE_SNAPPY CompressType = 1
	CompressType_COMPRESS_TYPE_GZIP   CompressType = 2
	CompressType_COMPRESS_TYPE_ZLIB   CompressType = 3
	CompressType_COMPRESS_TYPE_LZ4    CompressType = 4
)

var CompressType_name = map[int32]string{
	0: "COMPRESS_TYPE_NONE",
	1: "COMPRESS_TYPE_SNAPPY",
	2: "COMPRESS_TYPE_GZIP",
	3: "COMPRESS_TYPE_ZLIB",
	4: "COMPRESS_TYPE_LZ4",
}
var CompressType_value = map[string]int32{
	"COMPRESS_TYPE_NONE":   0,
	"COMPRESS_TYPE_SNAPPY": 1,
	"COMPRESS_TYPE_GZIP":   2,
	"COMPRESS_TYPE_ZLIB":   3,
	"COMPRESS_TYPE_LZ4":    4,
}

func (x CompressType) Enum() *CompressType {
	p := new(CompressType)
	*p = x
	return p
}
func (x CompressType) String() string {
	return proto.EnumName(CompressType_name, int32(x))
}
func (x *CompressType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CompressType_value, data, "CompressType")
	if err != nil {
		return err
	}
	*x = CompressType(value)
	return nil
}
func (CompressType) EnumDescriptor() ([]byte, []int) { return fileDescriptor4, []int{1} }

type ConnectionType int32

const (
	// bit-exclusive values since we may OR them to represent supported types.
	ConnectionType_CONNECTION_TYPE_UNKNOWN ConnectionType = 0
	ConnectionType_CONNECTION_TYPE_SINGLE  ConnectionType = 1
	ConnectionType_CONNECTION_TYPE_POOLED  ConnectionType = 2
	ConnectionType_CONNECTION_TYPE_SHORT   ConnectionType = 4
)

var ConnectionType_name = map[int32]string{
	0: "CONNECTION_TYPE_UNKNOWN",
	1: "CONNECTION_TYPE_SINGLE",
	2: "CONNECTION_TYPE_POOLED",
	4: "CONNECTION_TYPE_SHORT",
}
var ConnectionType_value = map[string]int32{
	"CONNECTION_TYPE_UNKNOWN": 0,
	"CONNECTION_TYPE_SINGLE":  1,
	"CONNECTION_TYPE_POOLED":  2,
	"CONNECTION_TYPE_SHORT":   4,
}

func (x ConnectionType) Enum() *ConnectionType {
	p := new(ConnectionType)
	*p = x
	return p
}
func (x ConnectionType) String() string {
	return proto.EnumName(ConnectionType_name, int32(x))
}
func (x *ConnectionType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ConnectionType_value, data, "ConnectionType")
	if err != nil {
		return err
	}
	*x = ConnectionType(value)
	return nil
}
func (ConnectionType) EnumDescriptor() ([]byte, []int) { return fileDescriptor4, []int{2} }

type ProtocolType int32

const (
	ProtocolType_PROTOCOL_UNKNOWN           ProtocolType = 0
	ProtocolType_PROTOCOL_BAIDU_STD         ProtocolType = 1
	ProtocolType_PROTOCOL_STREAMING_RPC     ProtocolType = 2
	ProtocolType_PROTOCOL_HULU_PBRPC        ProtocolType = 3
	ProtocolType_PROTOCOL_SOFA_PBRPC        ProtocolType = 4
	ProtocolType_PROTOCOL_MEMCACHE          ProtocolType = 5
	ProtocolType_PROTOCOL_HTTP              ProtocolType = 6
	ProtocolType_PROTOCOL_PUBLIC_PBRPC      ProtocolType = 7
	ProtocolType_PROTOCOL_NOVA_PBRPC        ProtocolType = 8
	ProtocolType_PROTOCOL_NSHEAD_CLIENT     ProtocolType = 9
	ProtocolType_PROTOCOL_NSHEAD_SERVER     ProtocolType = 10
	ProtocolType_PROTOCOL_HADOOP_RPC        ProtocolType = 11
	ProtocolType_PROTOCOL_HADOOP_SERVER_RPC ProtocolType = 12
	ProtocolType_PROTOCOL_MONGO_SERVER      ProtocolType = 13
	ProtocolType_PROTOCOL_UBRPC_COMPACK     ProtocolType = 14
	ProtocolType_PROTOCOL_DIDX_CLIENT       ProtocolType = 15
	ProtocolType_PROTOCOL_REDIS             ProtocolType = 16
)

var ProtocolType_name = map[int32]string{
	0:  "PROTOCOL_UNKNOWN",
	1:  "PROTOCOL_BAIDU_STD",
	2:  "PROTOCOL_STREAMING_RPC",
	3:  "PROTOCOL_HULU_PBRPC",
	4:  "PROTOCOL_SOFA_PBRPC",
	5:  "PROTOCOL_MEMCACHE",
	6:  "PROTOCOL_HTTP",
	7:  "PROTOCOL_PUBLIC_PBRPC",
	8:  "PROTOCOL_NOVA_PBRPC",
	9:  "PROTOCOL_NSHEAD_CLIENT",
	10: "PROTOCOL_NSHEAD_SERVER",
	11: "PROTOCOL_HADOOP_RPC",
	12: "PROTOCOL_HADOOP_SERVER_RPC",
	13: "PROTOCOL_MONGO_SERVER",
	14: "PROTOCOL_UBRPC_COMPACK",
	15: "PROTOCOL_DIDX_CLIENT",
	16: "PROTOCOL_REDIS",
}
var ProtocolType_value = map[string]int32{
	"PROTOCOL_UNKNOWN":           0,
	"PROTOCOL_BAIDU_STD":         1,
	"PROTOCOL_STREAMING_RPC":     2,
	"PROTOCOL_HULU_PBRPC":        3,
	"PROTOCOL_SOFA_PBRPC":        4,
	"PROTOCOL_MEMCACHE":          5,
	"PROTOCOL_HTTP":              6,
	"PROTOCOL_PUBLIC_PBRPC":      7,
	"PROTOCOL_NOVA_PBRPC":        8,
	"PROTOCOL_NSHEAD_CLIENT":     9,
	"PROTOCOL_NSHEAD_SERVER":     10,
	"PROTOCOL_HADOOP_RPC":        11,
	"PROTOCOL_HADOOP_SERVER_RPC": 12,
	"PROTOCOL_MONGO_SERVER":      13,
	"PROTOCOL_UBRPC_COMPACK":     14,
	"PROTOCOL_DIDX_CLIENT":       15,
	"PROTOCOL_REDIS":             16,
}

func (x ProtocolType) Enum() *ProtocolType {
	p := new(ProtocolType)
	*p = x
	return p
}
func (x ProtocolType) String() string {
	return proto.EnumName(ProtocolType_name, int32(x))
}
func (x *ProtocolType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ProtocolType_value, data, "ProtocolType")
	if err != nil {
		return err
	}
	*x = ProtocolType(value)
	return nil
}
func (ProtocolType) EnumDescriptor() ([]byte, []int) { return fileDescriptor4, []int{3} }

type ChunkInfo struct {
	StreamId         *int64 `protobuf:"varint,1,req,name=stream_id,json=streamId" json:"stream_id,omitempty"`
	ChunkId          *int64 `protobuf:"varint,2,req,name=chunk_id,json=chunkId" json:"chunk_id,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *ChunkInfo) Reset()                    { *m = ChunkInfo{} }
func (m *ChunkInfo) String() string            { return proto.CompactTextString(m) }
func (*ChunkInfo) ProtoMessage()               {}
func (*ChunkInfo) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{0} }

func (m *ChunkInfo) GetStreamId() int64 {
	if m != nil && m.StreamId != nil {
		return *m.StreamId
	}
	return 0
}

func (m *ChunkInfo) GetChunkId() int64 {
	if m != nil && m.ChunkId != nil {
		return *m.ChunkId
	}
	return 0
}

var E_ServiceTimeout = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf.ServiceOptions)(nil),
	ExtensionType: (*int64)(nil),
	Field:         90000,
	Name:          "baidu.rpc.service_timeout",
	Tag:           "varint,90000,opt,name=service_timeout,json=serviceTimeout,def=10000",
	Filename:      "baidu/rpc/options.proto",
}

var E_RequestTalkType = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf.MethodOptions)(nil),
	ExtensionType: (*TalkType)(nil),
	Field:         90001,
	Name:          "baidu.rpc.request_talk_type",
	Tag:           "varint,90001,opt,name=request_talk_type,json=requestTalkType,enum=baidu.rpc.TalkType,def=0",
	Filename:      "baidu/rpc/options.proto",
}

var E_ResponseTalkType = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf.MethodOptions)(nil),
	ExtensionType: (*TalkType)(nil),
	Field:         90002,
	Name:          "baidu.rpc.response_talk_type",
	Tag:           "varint,90002,opt,name=response_talk_type,json=responseTalkType,enum=baidu.rpc.TalkType,def=0",
	Filename:      "baidu/rpc/options.proto",
}

var E_MethodTimeout = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf.MethodOptions)(nil),
	ExtensionType: (*int64)(nil),
	Field:         90003,
	Name:          "baidu.rpc.method_timeout",
	Tag:           "varint,90003,opt,name=method_timeout,json=methodTimeout",
	Filename:      "baidu/rpc/options.proto",
}

var E_RequestCompression = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf.MethodOptions)(nil),
	ExtensionType: (*CompressType)(nil),
	Field:         90004,
	Name:          "baidu.rpc.request_compression",
	Tag:           "varint,90004,opt,name=request_compression,json=requestCompression,enum=baidu.rpc.CompressType,def=0",
	Filename:      "baidu/rpc/options.proto",
}

var E_ResponseCompression = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf.MethodOptions)(nil),
	ExtensionType: (*CompressType)(nil),
	Field:         90005,
	Name:          "baidu.rpc.response_compression",
	Tag:           "varint,90005,opt,name=response_compression,json=responseCompression,enum=baidu.rpc.CompressType,def=0",
	Filename:      "baidu/rpc/options.proto",
}

func init() {
	proto.RegisterType((*ChunkInfo)(nil), "baidu.rpc.ChunkInfo")
	proto.RegisterEnum("baidu.rpc.TalkType", TalkType_name, TalkType_value)
	proto.RegisterEnum("baidu.rpc.CompressType", CompressType_name, CompressType_value)
	proto.RegisterEnum("baidu.rpc.ConnectionType", ConnectionType_name, ConnectionType_value)
	proto.RegisterEnum("baidu.rpc.ProtocolType", ProtocolType_name, ProtocolType_value)
	proto.RegisterExtension(E_ServiceTimeout)
	proto.RegisterExtension(E_RequestTalkType)
	proto.RegisterExtension(E_ResponseTalkType)
	proto.RegisterExtension(E_MethodTimeout)
	proto.RegisterExtension(E_RequestCompression)
	proto.RegisterExtension(E_ResponseCompression)
}

func init() { proto.RegisterFile("baidu/rpc/options.proto", fileDescriptor4) }

var fileDescriptor4 = []byte{
	// 717 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x9c, 0x54, 0x4d, 0x4f, 0xdb, 0x4a,
	0x14, 0xc5, 0x09, 0x3c, 0x92, 0x79, 0x24, 0x0c, 0x13, 0x20, 0x01, 0x24, 0x1e, 0x7a, 0x2b, 0x94,
	0x45, 0x92, 0x56, 0x55, 0x17, 0xd9, 0x39, 0xe3, 0x69, 0x62, 0xe1, 0xcc, 0xb8, 0xb6, 0x03, 0x85,
	0x8d, 0x15, 0x1c, 0x03, 0x11, 0x49, 0xc6, 0xb5, 0x9d, 0x4a, 0xdd, 0x54, 0xec, 0xba, 0xed, 0xe7,
	0xdf, 0x69, 0xff, 0x5a, 0xe5, 0x4f, 0x62, 0x82, 0x84, 0xe8, 0xd2, 0xf7, 0xdc, 0x7b, 0xce, 0xbd,
	0xc7, 0x73, 0x2f, 0xa8, 0x5e, 0x0e, 0xc7, 0xa3, 0x79, 0xd3, 0x75, 0xac, 0x26, 0x77, 0xfc, 0x31,
	0x9f, 0x79, 0x0d, 0xc7, 0xe5, 0x3e, 0x47, 0xc5, 0x10, 0x68, 0xb8, 0x8e, 0xb5, 0x7f, 0x74, 0xcd,
	0xf9, 0xf5, 0xc4, 0x6e, 0x86, 0xc0, 0xe5, 0xfc, 0xaa, 0x39, 0xb2, 0x3d, 0xcb, 0x1d, 0x3b, 0x3e,
	0x77, 0xa3, 0xe4, 0xff, 0x31, 0x28, 0xe2, 0x9b, 0xf9, 0xec, 0x56, 0x9e, 0x5d, 0x71, 0x74, 0x00,
	0x8a, 0x9e, 0xef, 0xda, 0xc3, 0xa9, 0x39, 0x1e, 0xd5, 0x84, 0xa3, 0xdc, 0x71, 0x5e, 0x2b, 0x44,
	0x01, 0x79, 0x84, 0xf6, 0x40, 0xc1, 0x0a, 0x32, 0x03, 0x2c, 0x17, 0x62, 0xeb, 0xe1, 0xb7, 0x3c,
	0xaa, 0xbf, 0x06, 0x05, 0x63, 0x38, 0xb9, 0x35, 0x3e, 0x3a, 0x36, 0xda, 0x06, 0xd0, 0x10, 0x95,
	0x13, 0xd3, 0x38, 0x57, 0x89, 0x49, 0x99, 0xd6, 0x17, 0x15, 0xb8, 0x92, 0x8d, 0x32, 0x4a, 0xce,
	0xc4, 0x73, 0x28, 0xd4, 0x3f, 0x0b, 0x60, 0x03, 0xf3, 0xa9, 0xe3, 0xda, 0x9e, 0x17, 0x16, 0xef,
	0x02, 0x84, 0x59, 0x5f, 0xd5, 0x88, 0xae, 0x27, 0x04, 0x94, 0xc0, 0x15, 0x54, 0x03, 0xdb, 0xd9,
	0xb8, 0x4e, 0x45, 0x55, 0x3d, 0x87, 0xc2, 0x72, 0x45, 0xf7, 0x42, 0x56, 0x61, 0x6e, 0x39, 0x7e,
	0xa1, 0xc8, 0x1d, 0x98, 0x47, 0x3b, 0x60, 0x2b, 0x1b, 0x57, 0x2e, 0x5e, 0xc1, 0xd5, 0xfa, 0x9d,
	0x00, 0xca, 0x98, 0xcf, 0x66, 0xb6, 0x15, 0x38, 0x19, 0xf6, 0x72, 0x00, 0xaa, 0x98, 0x51, 0x4a,
	0xb0, 0x21, 0x33, 0x1a, 0xe5, 0x0e, 0xe8, 0x09, 0x65, 0x67, 0x14, 0xae, 0xa0, 0x7d, 0xb0, 0xfb,
	0x10, 0xd4, 0x65, 0xda, 0x55, 0x08, 0x14, 0x1e, 0xc3, 0x54, 0xc6, 0x14, 0x22, 0xc1, 0x1c, 0xda,
	0x03, 0x3b, 0x4b, 0x75, 0x3d, 0xa6, 0x19, 0x70, 0xb5, 0xfe, 0x2b, 0x0f, 0x36, 0xd4, 0xe0, 0x9f,
	0x58, 0x7c, 0x92, 0x38, 0xa9, 0x6a, 0xcc, 0x60, 0x98, 0x29, 0x0b, 0xca, 0xbb, 0x00, 0xa5, 0xd1,
	0x8e, 0x28, 0x4b, 0x03, 0x53, 0x37, 0xa4, 0x48, 0x35, 0x8d, 0xeb, 0x86, 0x46, 0xc4, 0xbe, 0x4c,
	0xbb, 0xa6, 0xa6, 0x62, 0x98, 0x43, 0x55, 0x50, 0x49, 0xb1, 0xde, 0x40, 0x19, 0x98, 0x6a, 0x27,
	0x00, 0xf2, 0x19, 0x40, 0x67, 0x6f, 0xc4, 0x18, 0x58, 0x0d, 0x6c, 0x4a, 0x81, 0x3e, 0xe9, 0x63,
	0x11, 0xf7, 0x08, 0x5c, 0x43, 0x5b, 0xa0, 0x74, 0x4f, 0x64, 0x18, 0x2a, 0xfc, 0x27, 0x98, 0x28,
	0x0d, 0xa9, 0x83, 0x8e, 0x22, 0xe3, 0x98, 0x64, 0x3d, 0xc3, 0x4e, 0xd9, 0x69, 0xc2, 0x5e, 0xc8,
	0xf4, 0x4a, 0xf5, 0x1e, 0x11, 0x25, 0x13, 0x2b, 0x32, 0xa1, 0x06, 0x2c, 0x3e, 0x86, 0xe9, 0x44,
	0x3b, 0x25, 0x1a, 0x04, 0xd9, 0x39, 0x44, 0x89, 0x31, 0x35, 0x1c, 0xf0, 0x5f, 0x74, 0x08, 0xf6,
	0x1f, 0x02, 0x51, 0x51, 0x88, 0x6f, 0x64, 0x9a, 0xec, 0x33, 0xda, 0x65, 0x09, 0x67, 0x29, 0xa3,
	0x37, 0x08, 0xfa, 0x33, 0x83, 0xf7, 0x21, 0xe2, 0x13, 0x58, 0x0e, 0x9e, 0x5d, 0x8a, 0x49, 0xb2,
	0xf4, 0x2e, 0xe9, 0x72, 0x13, 0x21, 0x50, 0x4e, 0x11, 0x8d, 0x48, 0xb2, 0x0e, 0x61, 0xfb, 0x2d,
	0xd8, 0xf4, 0x6c, 0xf7, 0xc3, 0xd8, 0xb2, 0x4d, 0x7f, 0x3c, 0xb5, 0xf9, 0xdc, 0x47, 0xff, 0x35,
	0xa2, 0x05, 0x6c, 0x24, 0x0b, 0xd8, 0xd0, 0xa3, 0x0c, 0x16, 0x6d, 0x6c, 0xed, 0xcb, 0xef, 0xb5,
	0x23, 0xe1, 0x38, 0xdf, 0x5e, 0x7b, 0xd1, 0x6a, 0xb5, 0x5a, 0x5a, 0x39, 0x26, 0x30, 0xa2, 0xfa,
	0xb6, 0x07, 0xb6, 0x5c, 0xfb, 0xfd, 0xdc, 0xf6, 0x7c, 0xd3, 0x1f, 0x4e, 0x6e, 0x4d, 0x3f, 0x78,
	0x17, 0x87, 0x4b, 0xa4, 0x7d, 0xdb, 0xbf, 0xe1, 0xa3, 0x84, 0xf3, 0x6b, 0xc8, 0x59, 0x7e, 0x59,
	0x69, 0xa4, 0x87, 0xa0, 0x91, 0xac, 0x67, 0x7b, 0x69, 0x39, 0xb5, 0xcd, 0x58, 0x21, 0x4d, 0x99,
	0x03, 0xe4, 0xda, 0x9e, 0xc3, 0x67, 0x9e, 0xfd, 0x0c, 0xd5, 0x6f, 0xcf, 0x53, 0x85, 0x89, 0x44,
	0x9a, 0xd3, 0x05, 0xe5, 0x69, 0xc8, 0x98, 0xba, 0xf7, 0x94, 0xe4, 0xf7, 0xc8, 0x3c, 0xad, 0x14,
	0xd5, 0x25, 0xa6, 0x7d, 0x02, 0x95, 0xc4, 0x34, 0x2b, 0x3e, 0x2e, 0x63, 0x3e, 0x7b, 0x92, 0xed,
	0x47, 0x3c, 0x40, 0x75, 0x61, 0x80, 0xc5, 0xe3, 0xd4, 0x7e, 0xe4, 0x34, 0x69, 0x28, 0x56, 0xc2,
	0xf7, 0x42, 0xed, 0x3b, 0x01, 0x6c, 0xa7, 0x06, 0x3e, 0xa7, 0x83, 0x9f, 0x7f, 0xd3, 0x41, 0x25,
	0x91, 0x5a, 0x68, 0xa1, 0x53, 0x03, 0x25, 0x8b, 0x4f, 0xef, 0x69, 0x3a, 0xeb, 0xb1, 0xc6, 0x9f,
	0x00, 0x00, 0x00, 0xff, 0xff, 0xed, 0x65, 0x74, 0x05, 0x36, 0x06, 0x00, 0x00,
}
