// Code generated by protoc-gen-go. DO NOT EDIT.
// source: baidu/rpc/rpc_dump.proto

package baidu_rpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type RpcDumpMeta struct {
	// baidu_std, hulu_pbrpc
	ServiceName *string `protobuf:"bytes,1,opt,name=service_name,json=serviceName" json:"service_name,omitempty"`
	// baidu_std, sofa_pbrpc(full_method_name)
	MethodName *string `protobuf:"bytes,2,opt,name=method_name,json=methodName" json:"method_name,omitempty"`
	// hulu_pbrpc
	MethodIndex *int32 `protobuf:"varint,3,opt,name=method_index,json=methodIndex" json:"method_index,omitempty"`
	// baidu_std, hulu_pbrpc, sofa_pbrpc
	CompressType *CompressType `protobuf:"varint,4,opt,name=compress_type,json=compressType,enum=baidu.rpc.CompressType" json:"compress_type,omitempty"`
	ProtocolType *ProtocolType `protobuf:"varint,5,opt,name=protocol_type,json=protocolType,enum=baidu.rpc.ProtocolType" json:"protocol_type,omitempty"`
	// baidu_std, hulu_pbrpc
	AttachmentSize *int32 `protobuf:"varint,6,opt,name=attachment_size,json=attachmentSize" json:"attachment_size,omitempty"`
	// baidu_std
	AuthenticationData []byte `protobuf:"bytes,7,opt,name=authentication_data,json=authenticationData" json:"authentication_data,omitempty"`
	XXX_unrecognized   []byte `json:"-"`
}

func (m *RpcDumpMeta) Reset()                    { *m = RpcDumpMeta{} }
func (m *RpcDumpMeta) String() string            { return proto.CompactTextString(m) }
func (*RpcDumpMeta) ProtoMessage()               {}
func (*RpcDumpMeta) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{0} }

func (m *RpcDumpMeta) GetServiceName() string {
	if m != nil && m.ServiceName != nil {
		return *m.ServiceName
	}
	return ""
}

func (m *RpcDumpMeta) GetMethodName() string {
	if m != nil && m.MethodName != nil {
		return *m.MethodName
	}
	return ""
}

func (m *RpcDumpMeta) GetMethodIndex() int32 {
	if m != nil && m.MethodIndex != nil {
		return *m.MethodIndex
	}
	return 0
}

func (m *RpcDumpMeta) GetCompressType() CompressType {
	if m != nil && m.CompressType != nil {
		return *m.CompressType
	}
	return CompressType_COMPRESS_TYPE_NONE
}

func (m *RpcDumpMeta) GetProtocolType() ProtocolType {
	if m != nil && m.ProtocolType != nil {
		return *m.ProtocolType
	}
	return ProtocolType_PROTOCOL_UNKNOWN
}

func (m *RpcDumpMeta) GetAttachmentSize() int32 {
	if m != nil && m.AttachmentSize != nil {
		return *m.AttachmentSize
	}
	return 0
}

func (m *RpcDumpMeta) GetAuthenticationData() []byte {
	if m != nil {
		return m.AuthenticationData
	}
	return nil
}

func init() {
	proto.RegisterType((*RpcDumpMeta)(nil), "baidu.rpc.RpcDumpMeta")
}

func init() { proto.RegisterFile("baidu/rpc/rpc_dump.proto", fileDescriptor5) }

var fileDescriptor5 = []byte{
	// 267 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x64, 0x90, 0x31, 0x4f, 0xf3, 0x30,
	0x10, 0x86, 0x95, 0x7e, 0x5f, 0x41, 0x75, 0x42, 0x91, 0xcc, 0x50, 0x8b, 0x85, 0x94, 0x85, 0x4c,
	0xa9, 0xc4, 0xcc, 0x46, 0x17, 0x06, 0x10, 0x0a, 0xec, 0xd1, 0xe1, 0x9c, 0x14, 0x4b, 0x38, 0x3e,
	0x25, 0x17, 0x44, 0xfb, 0x13, 0xf9, 0x55, 0x28, 0xb6, 0x45, 0x8b, 0x18, 0x3c, 0xdc, 0xfb, 0x3e,
	0x8f, 0xf4, 0xca, 0x42, 0xbd, 0x81, 0x69, 0xc6, 0x4d, 0x4f, 0x7a, 0x7a, 0x75, 0x33, 0x5a, 0x2a,
	0xa9, 0x77, 0xec, 0xe4, 0xc2, 0x37, 0x65, 0x4f, 0xfa, 0x72, 0x75, 0x80, 0x1c, 0xb1, 0x71, 0xdd,
	0x10, 0x98, 0xeb, 0xaf, 0x99, 0x48, 0x2b, 0xd2, 0xdb, 0xd1, 0xd2, 0x23, 0x32, 0xc8, 0xb5, 0xc8,
	0x06, 0xec, 0x3f, 0x8c, 0xc6, 0xba, 0x03, 0x8b, 0x2a, 0xc9, 0x93, 0x62, 0x51, 0xa5, 0x31, 0x7b,
	0x02, 0x8b, 0xf2, 0x4a, 0xa4, 0x16, 0xb9, 0x75, 0x4d, 0x20, 0x66, 0x9e, 0x10, 0x21, 0xf2, 0xc0,
	0x5a, 0x64, 0x11, 0x30, 0x5d, 0x83, 0x9f, 0xea, 0x5f, 0x9e, 0x14, 0xf3, 0x2a, 0x4a, 0x0f, 0x53,
	0x24, 0xef, 0xc4, 0x99, 0x76, 0x96, 0x7a, 0x1c, 0x86, 0x9a, 0x77, 0x84, 0xea, 0x7f, 0x9e, 0x14,
	0xcb, 0xdb, 0x55, 0xf9, 0x33, 0xb9, 0xbc, 0x8f, 0xfd, 0xeb, 0x8e, 0xb0, 0xca, 0xf4, 0xd1, 0x35,
	0xd9, 0x7e, 0xbd, 0x76, 0xef, 0xc1, 0x9e, 0xff, 0xb1, 0x9f, 0x63, 0x1f, 0x6c, 0x3a, 0xba, 0xe4,
	0x8d, 0x38, 0x07, 0x66, 0xd0, 0xad, 0xc5, 0x8e, 0xeb, 0xc1, 0xec, 0x51, 0x9d, 0xf8, 0x85, 0xcb,
	0x43, 0xfc, 0x62, 0xf6, 0x28, 0x37, 0xe2, 0x02, 0x46, 0x6e, 0xb1, 0x63, 0xa3, 0x61, 0xfa, 0xb4,
	0xba, 0x01, 0x06, 0x75, 0x9a, 0x27, 0x45, 0x56, 0xc9, 0xdf, 0xd5, 0x16, 0x18, 0xbe, 0x03, 0x00,
	0x00, 0xff, 0xff, 0x92, 0xbb, 0xf8, 0xa2, 0x8b, 0x01, 0x00, 0x00,
}
